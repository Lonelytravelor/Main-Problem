本题要求实现一个函数，将两个链表表示的递增整数序列合并为一个非递减的整数序列。

函数接口定义：
List Merge( List L1, List L2 );

L1和L2是给定的带头结点的单链表，其结点存储的数据是递增有序的；函数Merge要将L1和L2合并为一个非递减的整数序列。应直接使用原序列中的结点，返回归并后的带头结点的链表头指针。

裁判测试程序样例：
#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;
typedef struct Node *PtrToNode;
struct Node {
    ElementType Data;
    PtrToNode   Next;
};
typedef PtrToNode List;

List Read(); /* 细节在此不表 */
void Print( List L ); /* 细节在此不表；空链表将输出NULL */

List Merge( List L1, List L2 );

int main()
{
    List L1, L2, L;
    L1 = Read();
    L2 = Read();
    L = Merge(L1, L2);
    Print(L);
    Print(L1);
    Print(L2);
    return 0;
}

/* 你的代码将被嵌在这里 */
List Merge( List L1, List L2 ){
	List Pa = L1->Next;
	List Pb = L2->Next;
	List L = (List)malloc(sizeof( struct Node ));
	List r = L;
	
	while( Pa != NULL && Pb != NULL){/*循环结束的条件应该是PaPb为空，因为PaPb再此程序中代表当前被指向的节点，循环检验当前被指向的节点是否为空*/
		if( Pa->Data <= Pb->Data){
			r->Next = Pa;
			r = Pa;
			Pa = Pa->Next; 
		}else{
			r->Next = Pb;
			r = Pb;
			Pb = Pb->Next; 
		}
	}
	if( Pa == NULL ){
		r->Next = Pb;
	}else{
		r->Next = Pa;
	}
	L1->Next = NULL;/*被释放的应该是原头结点的下一位，而并非是被改变位置的Pa*/
	L2->Next = NULL;
	return L;
} 
