/*在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。

最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。

建筑物高度可以增加的最大总和是多少？

*/



int maxIncreaseKeepingSkyline(int** grid, int gridSize, int* gridColSize){
    int i,j,sum = 0,max;
    const int a = *gridColSize;
    int temp[2][a];

    /*获得横向最高值*/
    for( i = 0; i < *gridColSize; i++ ){
        max = grid[i][0];
        for( j = 0; j < *gridColSize; j++ ){
            if( grid[i][j] > max )
                max = grid[i][j];
        }
        temp[0][i] = max;
    }
    /*获得纵向最高值*/
    for( j = 0; j < *gridColSize; j++ ){
        max = grid[0][j];
        for( i = 0; i < *gridColSize; i++ ){
            if( grid[i][j] > max )
                max = grid[i][j];
        }
        temp[1][j] = max;
    }
    // for(i = 0; i < 2 ; i++){
    //     for(j = 0; j < *gridColSize ; j++ ){
    //         printf("%d",temp[i][j]);
    //     }
    // }
    for(i = 0; i < *gridColSize ; i++){
        for(j = 0; j < *gridColSize; j++ ){
            //printf("%d ",min( temp[0][i] , temp[1][j] ));
            //printf("%d ",grid[i][j] );
            sum += ( min( temp[0][i] , temp[1][j] ) - grid[i][j] );
        }
    }

    return sum ;
}

int min( int a , int b ){
    if( b < a ){
        a = b ;
    }

    return a;
}

/*
传入数组的同时也应该传入行数和列数。
尽量避免用变量来创建一个新的数组
row-行 col-列
*/ 
